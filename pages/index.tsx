
import { addDoc, collection, doc, serverTimestamp, updateDoc } from 'firebase/firestore'
import { getDownloadURL, ref, uploadString } from 'firebase/storage'
import type { NextPage } from 'next'
import Head from 'next/head'
import { useState } from 'react'
import useAuth from '../hooks/useAuth'
import { db, storage } from '../lib/firebase'
import EmojiPicker from '../components/emojipicker'
import ImagePicker from '../components/imagepicker'
import useToast from '../hooks/useToast'
import Loading from '../components/loading'
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
import {
  faTimes
} from "@fortawesome/free-solid-svg-icons";
import Feeds from '../components/feeds'
import ProfileImage from '../components/profileImage'
import Container from '../components/container'

const Home: NextPage = () => {
  const { user, logout } = useAuth()
  const [message, setMessage] = useState<string>('')
  const [loading, setLoading] = useState(false)
  const [selectedImage, setSelectedImage] = useState<string>('')
  const { addToast } = useToast()


  const sendPost = async () => {
    setLoading(true)

    const docRef = await addDoc(collection(db, `posts`), {
      message,
      timestamp: serverTimestamp(),
      userId: user?.uid
    })

    if (selectedImage) {
      const imageRef = ref(storage, `posts/${docRef.id}/image`)
      console.log(selectedImage)
      await uploadString(imageRef, selectedImage, 'data_url')
        .then(async () => {
          const downloadUrl = await getDownloadURL(imageRef)
          await updateDoc(doc(db, 'posts', docRef.id), {
            imageUrl: downloadUrl
          })
        }).catch((error) => {
          addToast(error.message, { appearance: 'error' })
        })
    }

    setLoading(false)
    setMessage('')
    setSelectedImage('')
    addToast('Create post successfully', { appearance: 'notice' })
  }

  const selectEmoji = (event: any, emojiObject: any) => {
    setMessage(message + emojiObject.emoji)
  }

  const handleImageSelect = (image: File) => {

    const reader = new FileReader()
    reader.readAsDataURL(image)

    reader.onload = function (readerEvent) {
      if (readerEvent.target) {
        setSelectedImage(readerEvent.target.result as string)
      }
    }

  }

  const removeSelectedImage = () => {
    setSelectedImage('')
  }
  return (
    <div>
      <Head>
        <title>Home</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Container>
        <div className='message-form flex gap-4 px-3'>
          <ProfileImage imageUrl={user?.photoURL} />
          <div className='field w-full'>
            <textarea name="message" value={message} onChange={(e) => setMessage(e.target.value)} placeholder="Write Message..." className="resize-none w-full bg-transparent text-teal-500" />
            <div className='border border-teal-500 mb-4'></div>
            {selectedImage && <div className='mb-2 relative'>
              <img src={selectedImage}></img>
              <FontAwesomeIcon icon={faTimes} className="absolute top-[10px] right-[10px] cursor-pointer bg-white p-1 rounded-full w-[1em] h-[1em]" onClick={removeSelectedImage} />
            </div>}
            <div className='flex items-center'>
              <div className='basis-3/4 flex gap-5'>
                <EmojiPicker onEmojiClick={selectEmoji} />
                <ImagePicker name='image' onSelected={handleImageSelect} />
              </div>
              <div className='basis-1/4 text-center'>
                <button onClick={sendPost} disabled={!message && !selectedImage} className="border rounded border-teal-500 px-3 py-1 ml-auto w-[100px] flex justify-center text-teal-500 disabled:border-teal-200 disabled:text-teal-200 cursor-pointer">
                  {!loading ? 'Post' : <Loading />}
                </button>
              </div>
            </div>
          </div>

        </div>
        <div className='border border-teal-500 mb-4 mt-4'></div>
        <Feeds />
      </Container>
      </div>
      )
}

      export default Home
